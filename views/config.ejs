<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Configuration Bot - Telegram Bot</title>
  <link rel="stylesheet" href="/style.css">
  <style>
    .phase-item {
      background: #f8f9fa;
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 15px;
    }
    .phase-item input, .phase-item textarea {
      width: 100%;
      margin: 8px 0;
    }
    .phase-item button {
      background: #dc3545;
      color: white;
      border: none;
      padding: 5px 15px;
      border-radius: 4px;
      cursor: pointer;
    }
    .add-phase-btn {
      background: #28a745;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <div class="container">
    <%- include('partials/header') %>
    <%- include('partials/nav') %>

    <div class="section">
      <h2>‚öôÔ∏è Configuration du Bot</h2>
      <p class="subtitle">G√©rez le comportement et le timing du bot</p>

      <form id="config-form">
        <h3>‚è±Ô∏è D√©lai de R√©ponse</h3>
        <p style="color: #666; font-size: 14px;">Ajoute un d√©lai r√©aliste avant que le bot r√©ponde (en secondes)</p>
        
        <div class="form-group">
          <label for="delayMin">D√©lai minimum (secondes)</label>
          <input type="number" id="delayMin" name="delayMin" min="0" max="60" value="<%= config.responseDelay.min %>" required>
        </div>

        <div class="form-group">
          <label for="delayMax">D√©lai maximum (secondes)</label>
          <input type="number" id="delayMax" name="delayMax" min="0" max="60" value="<%= config.responseDelay.max %>" required>
        </div>

        <hr style="margin: 30px 0;">

        <h3>üåç Fuseau Horaire (Paris)</h3>
        <p style="color: #666; font-size: 14px;">Configure le fuseau horaire pour que le bot adapte ses r√©ponses selon l'heure √† Paris</p>
        
        <div class="form-group">
          <label for="gmtOffset">Fuseau horaire</label>
          <select id="gmtOffset" name="gmtOffset">
            <option value="-12" <%= (config.gmtOffset || 1) === -12 ? 'selected' : '' %>>GMT-12 (Baker Island)</option>
            <option value="-11" <%= (config.gmtOffset || 1) === -11 ? 'selected' : '' %>>GMT-11 (Samoa)</option>
            <option value="-10" <%= (config.gmtOffset || 1) === -10 ? 'selected' : '' %>>GMT-10 (Hawaii)</option>
            <option value="-9" <%= (config.gmtOffset || 1) === -9 ? 'selected' : '' %>>GMT-9 (Alaska)</option>
            <option value="-8" <%= (config.gmtOffset || 1) === -8 ? 'selected' : '' %>>GMT-8 (Los Angeles)</option>
            <option value="-7" <%= (config.gmtOffset || 1) === -7 ? 'selected' : '' %>>GMT-7 (Denver)</option>
            <option value="-6" <%= (config.gmtOffset || 1) === -6 ? 'selected' : '' %>>GMT-6 (Mexico City)</option>
            <option value="-5" <%= (config.gmtOffset || 1) === -5 ? 'selected' : '' %>>GMT-5 (New York)</option>
            <option value="-4" <%= (config.gmtOffset || 1) === -4 ? 'selected' : '' %>>GMT-4 (Santiago)</option>
            <option value="-3" <%= (config.gmtOffset || 1) === -3 ? 'selected' : '' %>>GMT-3 (Buenos Aires)</option>
            <option value="-2" <%= (config.gmtOffset || 1) === -2 ? 'selected' : '' %>>GMT-2 (Mid-Atlantic)</option>
            <option value="-1" <%= (config.gmtOffset || 1) === -1 ? 'selected' : '' %>>GMT-1 (Azores)</option>
            <option value="0" <%= (config.gmtOffset || 1) === 0 ? 'selected' : '' %>>GMT+0 (Londres)</option>
            <option value="1" <%= (config.gmtOffset || 1) === 1 ? 'selected' : '' %>>GMT+1 (Paris, Berlin)</option>
            <option value="2" <%= (config.gmtOffset || 1) === 2 ? 'selected' : '' %>>GMT+2 (Le Caire)</option>
            <option value="3" <%= (config.gmtOffset || 1) === 3 ? 'selected' : '' %>>GMT+3 (Moscou)</option>
            <option value="4" <%= (config.gmtOffset || 1) === 4 ? 'selected' : '' %>>GMT+4 (Duba√Ø)</option>
            <option value="5" <%= (config.gmtOffset || 1) === 5 ? 'selected' : '' %>>GMT+5 (Karachi)</option>
            <option value="6" <%= (config.gmtOffset || 1) === 6 ? 'selected' : '' %>>GMT+6 (Dhaka)</option>
            <option value="7" <%= (config.gmtOffset || 1) === 7 ? 'selected' : '' %>>GMT+7 (Bangkok)</option>
            <option value="8" <%= (config.gmtOffset || 1) === 8 ? 'selected' : '' %>>GMT+8 (Singapour)</option>
            <option value="9" <%= (config.gmtOffset || 1) === 9 ? 'selected' : '' %>>GMT+9 (Tokyo)</option>
            <option value="10" <%= (config.gmtOffset || 1) === 10 ? 'selected' : '' %>>GMT+10 (Sydney)</option>
            <option value="11" <%= (config.gmtOffset || 1) === 11 ? 'selected' : '' %>>GMT+11 (Noum√©a)</option>
            <option value="12" <%= (config.gmtOffset || 1) === 12 ? 'selected' : '' %>>GMT+12 (Auckland)</option>
          </select>
          <p style="color: #888; font-size: 13px; margin-top: 5px;">
            üïí Paris = GMT+1 (heure d'hiver) ou GMT+2 (heure d'√©t√©)
          </p>
        </div>

        <hr style="margin: 30px 0;">

        <h3>üë§ Mode Humain</h3>
        <p style="color: #666; font-size: 14px;">Ajoute un d√©lai de 5 √† 10 minutes avant que le bot r√©ponde pour simuler un comportement plus naturel</p>
        
        <div class="form-group">
          <label for="humanModeEnabled" style="display: flex; align-items: center; gap: 10px;">
            <input type="checkbox" id="humanModeEnabled" name="humanModeEnabled" <%= config.humanMode && config.humanMode.enabled ? 'checked' : '' %>>
            Activer le mode humain
          </label>
        </div>

        <div id="humanModeSettings" style="<%= config.humanMode && config.humanMode.enabled ? '' : 'display: none;' %> margin-left: 20px;">
          <div class="form-group">
            <label for="humanDelayMin">D√©lai minimum (minutes)</label>
            <input type="number" id="humanDelayMin" name="humanDelayMin" min="1" max="60" value="<%= config.humanMode ? config.humanMode.delayMin : 5 %>">
          </div>

          <div class="form-group">
            <label for="humanDelayMax">D√©lai maximum (minutes)</label>
            <input type="number" id="humanDelayMax" name="humanDelayMax" min="1" max="60" value="<%= config.humanMode ? config.humanMode.delayMax : 10 %>">
          </div>
        </div>

        <hr style="margin: 30px 0;">

        <h3>üìä Phases de Conversation</h3>
        <p style="color: #666; font-size: 14px;">D√©finissez les phases de conversation pour guider l'IA selon le nombre de messages de l'utilisateur</p>

        <div id="phases-container">
          <% config.phases.forEach((phase, index) => { %>
            <div class="phase-item" data-index="<%= index %>">
              <h4>Phase <%= index + 1 %></h4>
              <label>Nom de la phase</label>
              <input type="text" class="phase-name" value="<%= phase.name %>" required>
              
              <label>Description / Instructions pour l'IA</label>
              <textarea class="phase-description" rows="3" required><%= phase.description %></textarea>
              
              <label>Nombre de messages utilisateur maximum</label>
              <input type="number" class="phase-count" min="1" max="9999" value="<%= phase.messageCount %>" required>
              
              <button type="button" onclick="removePhase(<%= index %>)">üóëÔ∏è Supprimer cette phase</button>
            </div>
          <% }) %>
        </div>

        <button type="button" class="add-phase-btn" onclick="addPhase()">‚ûï Ajouter une phase</button>

        <div style="margin-top: 30px;">
          <button type="submit" class="btn-primary">üíæ Enregistrer la configuration</button>
        </div>
      </form>

      <div id="config-status"></div>
    </div>
  </div>

  <script>
    let phaseIndex = <%= config.phases.length %>;

    document.getElementById('humanModeEnabled').addEventListener('change', function(e) {
      const settings = document.getElementById('humanModeSettings');
      if (e.target.checked) {
        settings.style.display = 'block';
      } else {
        settings.style.display = 'none';
      }
    });

    function addPhase() {
      const container = document.getElementById('phases-container');
      const newPhase = document.createElement('div');
      newPhase.className = 'phase-item';
      newPhase.setAttribute('data-index', phaseIndex);
      newPhase.innerHTML = `
        <h4>Phase ${phaseIndex + 1}</h4>
        <label>Nom de la phase</label>
        <input type="text" class="phase-name" value="phase_${phaseIndex + 1}" required>
        
        <label>Description / Instructions pour l'IA</label>
        <textarea class="phase-description" rows="3" required>Instructions pour cette phase</textarea>
        
        <label>Nombre de messages utilisateur maximum</label>
        <input type="number" class="phase-count" min="1" max="9999" value="10" required>
        
        <button type="button" onclick="removePhase(${phaseIndex})">üóëÔ∏è Supprimer cette phase</button>
      `;
      container.appendChild(newPhase);
      phaseIndex++;
    }

    function removePhase(index) {
      const phase = document.querySelector(`.phase-item[data-index="${index}"]`);
      if (phase) {
        phase.remove();
      }
    }

    document.getElementById('config-form').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const delayMin = parseInt(document.getElementById('delayMin').value);
      const delayMax = parseInt(document.getElementById('delayMax').value);
      
      if (delayMin > delayMax) {
        alert('Le d√©lai minimum doit √™tre inf√©rieur ou √©gal au d√©lai maximum');
        return;
      }

      const humanModeEnabled = document.getElementById('humanModeEnabled').checked;
      const humanDelayMin = parseInt(document.getElementById('humanDelayMin').value) || 5;
      const humanDelayMax = parseInt(document.getElementById('humanDelayMax').value) || 10;
      
      if (humanModeEnabled && humanDelayMin > humanDelayMax) {
        alert('Le d√©lai minimum du mode humain doit √™tre inf√©rieur ou √©gal au d√©lai maximum');
        return;
      }
      
      const phases = [];
      document.querySelectorAll('.phase-item').forEach(item => {
        phases.push({
          name: item.querySelector('.phase-name').value,
          description: item.querySelector('.phase-description').value,
          messageCount: parseInt(item.querySelector('.phase-count').value)
        });
      });
      
      if (phases.length === 0) {
        alert('Vous devez avoir au moins une phase');
        return;
      }
      
      const gmtOffset = parseInt(document.getElementById('gmtOffset').value);
      
      const config = {
        responseDelay: { min: delayMin, max: delayMax },
        humanMode: { enabled: humanModeEnabled, delayMin: humanDelayMin, delayMax: humanDelayMax },
        gmtOffset: gmtOffset,
        phases: phases
      };
      
      const statusDiv = document.getElementById('config-status');
      statusDiv.innerHTML = '<p class="loading">Enregistrement...</p>';
      
      try {
        const response = await fetch('/api/bot-config', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(config)
        });
        
        const result = await response.json();
        
        if (result.success) {
          statusDiv.innerHTML = '<p class="success">‚úÖ Configuration enregistr√©e avec succ√®s!</p>';
          setTimeout(() => {
            statusDiv.innerHTML = '';
          }, 3000);
        } else {
          statusDiv.innerHTML = '<p class="error">‚ùå Erreur lors de l\'enregistrement</p>';
        }
      } catch (error) {
        statusDiv.innerHTML = '<p class="error">‚ùå Erreur lors de l\'enregistrement</p>';
      }
    });
  </script>
</body>
</html>
